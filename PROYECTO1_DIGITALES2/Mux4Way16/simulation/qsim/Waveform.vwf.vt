// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/24/2023 18:30:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Mux4_16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mux4_16_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	sel0,
	sel1,
	sampler_tx
);
input [15:0] a0;
input [15:0] a1;
input [15:0] a2;
input [15:0] a3;
input  sel0;
input  sel1;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3 or sel0 or sel1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Mux4_16_vlg_check_tst (
	y,
	sampler_rx
);
input [15:0] y;
input sampler_rx;

reg [15:0] y_expected;

reg [15:0] y_prev;

reg [15:0] y_expected_prev;

reg [15:0] last_y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	y_prev = y;
end

// update expected /o prevs

always @(trigger)
begin
	y_expected_prev = y_expected;
end


// expected y[ 15 ]
initial
begin
	y_expected[15] = 1'bX;
end 
// expected y[ 14 ]
initial
begin
	y_expected[14] = 1'bX;
end 
// expected y[ 13 ]
initial
begin
	y_expected[13] = 1'bX;
end 
// expected y[ 12 ]
initial
begin
	y_expected[12] = 1'bX;
end 
// expected y[ 11 ]
initial
begin
	y_expected[11] = 1'bX;
end 
// expected y[ 10 ]
initial
begin
	y_expected[10] = 1'bX;
end 
// expected y[ 9 ]
initial
begin
	y_expected[9] = 1'bX;
end 
// expected y[ 8 ]
initial
begin
	y_expected[8] = 1'bX;
end 
// expected y[ 7 ]
initial
begin
	y_expected[7] = 1'bX;
end 
// expected y[ 6 ]
initial
begin
	y_expected[6] = 1'bX;
end 
// expected y[ 5 ]
initial
begin
	y_expected[5] = 1'bX;
end 
// expected y[ 4 ]
initial
begin
	y_expected[4] = 1'bX;
end 
// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
end 
// generate trigger
always @(y_expected or y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected y = %b | ",y_expected_prev);
	$display("| real y = %b | ",y_prev);
`endif
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end
	if (
		( y_expected_prev[4] !== 1'bx ) && ( y_prev[4] !== y_expected_prev[4] )
		&& ((y_expected_prev[4] !== last_y_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[4] = y_expected_prev[4];
	end
	if (
		( y_expected_prev[5] !== 1'bx ) && ( y_prev[5] !== y_expected_prev[5] )
		&& ((y_expected_prev[5] !== last_y_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[5] = y_expected_prev[5];
	end
	if (
		( y_expected_prev[6] !== 1'bx ) && ( y_prev[6] !== y_expected_prev[6] )
		&& ((y_expected_prev[6] !== last_y_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[6] = y_expected_prev[6];
	end
	if (
		( y_expected_prev[7] !== 1'bx ) && ( y_prev[7] !== y_expected_prev[7] )
		&& ((y_expected_prev[7] !== last_y_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[7] = y_expected_prev[7];
	end
	if (
		( y_expected_prev[8] !== 1'bx ) && ( y_prev[8] !== y_expected_prev[8] )
		&& ((y_expected_prev[8] !== last_y_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[8] = y_expected_prev[8];
	end
	if (
		( y_expected_prev[9] !== 1'bx ) && ( y_prev[9] !== y_expected_prev[9] )
		&& ((y_expected_prev[9] !== last_y_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[9] = y_expected_prev[9];
	end
	if (
		( y_expected_prev[10] !== 1'bx ) && ( y_prev[10] !== y_expected_prev[10] )
		&& ((y_expected_prev[10] !== last_y_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[10] = y_expected_prev[10];
	end
	if (
		( y_expected_prev[11] !== 1'bx ) && ( y_prev[11] !== y_expected_prev[11] )
		&& ((y_expected_prev[11] !== last_y_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[11] = y_expected_prev[11];
	end
	if (
		( y_expected_prev[12] !== 1'bx ) && ( y_prev[12] !== y_expected_prev[12] )
		&& ((y_expected_prev[12] !== last_y_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[12] = y_expected_prev[12];
	end
	if (
		( y_expected_prev[13] !== 1'bx ) && ( y_prev[13] !== y_expected_prev[13] )
		&& ((y_expected_prev[13] !== last_y_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[13] = y_expected_prev[13];
	end
	if (
		( y_expected_prev[14] !== 1'bx ) && ( y_prev[14] !== y_expected_prev[14] )
		&& ((y_expected_prev[14] !== last_y_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[14] = y_expected_prev[14];
	end
	if (
		( y_expected_prev[15] !== 1'bx ) && ( y_prev[15] !== y_expected_prev[15] )
		&& ((y_expected_prev[15] !== last_y_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[15] = y_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Mux4_16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a0;
reg [15:0] a1;
reg [15:0] a2;
reg [15:0] a3;
reg sel0;
reg sel1;
// wires                                               
wire [15:0] y;

wire sampler;                             

// assign statements (if any)                          
Mux4_16 i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.sel0(sel0),
	.sel1(sel1),
	.y(y)
);
// a0[ 15 ]
initial
begin
	a0[15] = 1'b1;
end 
// a0[ 14 ]
initial
begin
	a0[14] = 1'b1;
end 
// a0[ 13 ]
initial
begin
	a0[13] = 1'b1;
end 
// a0[ 12 ]
initial
begin
	a0[12] = 1'b1;
end 
// a0[ 11 ]
initial
begin
	a0[11] = 1'b1;
end 
// a0[ 10 ]
initial
begin
	a0[10] = 1'b1;
end 
// a0[ 9 ]
initial
begin
	a0[9] = 1'b1;
end 
// a0[ 8 ]
initial
begin
	a0[8] = 1'b1;
end 
// a0[ 7 ]
initial
begin
	a0[7] = 1'b1;
end 
// a0[ 6 ]
initial
begin
	a0[6] = 1'b1;
end 
// a0[ 5 ]
initial
begin
	a0[5] = 1'b1;
end 
// a0[ 4 ]
initial
begin
	a0[4] = 1'b1;
end 
// a0[ 3 ]
initial
begin
	a0[3] = 1'b1;
end 
// a0[ 2 ]
initial
begin
	a0[2] = 1'b1;
end 
// a0[ 1 ]
initial
begin
	a0[1] = 1'b1;
end 
// a0[ 0 ]
initial
begin
	a0[0] = 1'b1;
end 
// a1[ 15 ]
initial
begin
	a1[15] = 1'b0;
end 
// a1[ 14 ]
initial
begin
	a1[14] = 1'b0;
end 
// a1[ 13 ]
initial
begin
	a1[13] = 1'b0;
end 
// a1[ 12 ]
initial
begin
	a1[12] = 1'b0;
end 
// a1[ 11 ]
initial
begin
	a1[11] = 1'b0;
end 
// a1[ 10 ]
initial
begin
	a1[10] = 1'b0;
end 
// a1[ 9 ]
initial
begin
	a1[9] = 1'b0;
end 
// a1[ 8 ]
initial
begin
	a1[8] = 1'b0;
end 
// a1[ 7 ]
initial
begin
	a1[7] = 1'b0;
end 
// a1[ 6 ]
initial
begin
	a1[6] = 1'b0;
end 
// a1[ 5 ]
initial
begin
	a1[5] = 1'b0;
end 
// a1[ 4 ]
initial
begin
	a1[4] = 1'b0;
end 
// a1[ 3 ]
initial
begin
	a1[3] = 1'b0;
end 
// a1[ 2 ]
initial
begin
	a1[2] = 1'b0;
end 
// a1[ 1 ]
initial
begin
	a1[1] = 1'b0;
end 
// a1[ 0 ]
initial
begin
	a1[0] = 1'b0;
end 
// a2[ 15 ]
initial
begin
	a2[15] = 1'b0;
end 
// a2[ 14 ]
initial
begin
	a2[14] = 1'b0;
end 
// a2[ 13 ]
initial
begin
	a2[13] = 1'b0;
end 
// a2[ 12 ]
initial
begin
	a2[12] = 1'b0;
end 
// a2[ 11 ]
initial
begin
	a2[11] = 1'b0;
end 
// a2[ 10 ]
initial
begin
	a2[10] = 1'b0;
end 
// a2[ 9 ]
initial
begin
	a2[9] = 1'b0;
end 
// a2[ 8 ]
initial
begin
	a2[8] = 1'b0;
end 
// a2[ 7 ]
initial
begin
	a2[7] = 1'b0;
end 
// a2[ 6 ]
initial
begin
	a2[6] = 1'b0;
end 
// a2[ 5 ]
initial
begin
	a2[5] = 1'b0;
end 
// a2[ 4 ]
initial
begin
	a2[4] = 1'b0;
end 
// a2[ 3 ]
initial
begin
	a2[3] = 1'b0;
end 
// a2[ 2 ]
initial
begin
	a2[2] = 1'b0;
end 
// a2[ 1 ]
initial
begin
	a2[1] = 1'b0;
end 
// a2[ 0 ]
initial
begin
	a2[0] = 1'b0;
end 
// a3[ 15 ]
initial
begin
	a3[15] = 1'b0;
end 
// a3[ 14 ]
initial
begin
	a3[14] = 1'b0;
end 
// a3[ 13 ]
initial
begin
	a3[13] = 1'b0;
end 
// a3[ 12 ]
initial
begin
	a3[12] = 1'b0;
end 
// a3[ 11 ]
initial
begin
	a3[11] = 1'b0;
end 
// a3[ 10 ]
initial
begin
	a3[10] = 1'b0;
end 
// a3[ 9 ]
initial
begin
	a3[9] = 1'b0;
end 
// a3[ 8 ]
initial
begin
	a3[8] = 1'b0;
end 
// a3[ 7 ]
initial
begin
	a3[7] = 1'b0;
end 
// a3[ 6 ]
initial
begin
	a3[6] = 1'b0;
end 
// a3[ 5 ]
initial
begin
	a3[5] = 1'b0;
end 
// a3[ 4 ]
initial
begin
	a3[4] = 1'b0;
end 
// a3[ 3 ]
initial
begin
	a3[3] = 1'b0;
end 
// a3[ 2 ]
initial
begin
	a3[2] = 1'b0;
end 
// a3[ 1 ]
initial
begin
	a3[1] = 1'b0;
end 
// a3[ 0 ]
initial
begin
	a3[0] = 1'b0;
end 

// sel0
initial
begin
	sel0 = 1'b0;
end 

// sel1
initial
begin
	sel1 = 1'b0;
end 

Mux4_16_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.sel0(sel0),
	.sel1(sel1),
	.sampler_tx(sampler)
);

Mux4_16_vlg_check_tst tb_out(
	.y(y),
	.sampler_rx(sampler)
);
endmodule

